using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
    {
    }

    public DbSet<User> Users { get; set; }
    public DbSet<Wallet> Wallets { get; set; }
    public DbSet<Transaction> Transactions { get; set; }
    public DbSet<TransactionRelation> TransactionRelations { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        //generated by gpt

        // User - Wallet: One-to-Many
        modelBuilder.Entity<Wallet>()
            .HasOne(w => w.User)
            .WithMany(u => u.Wallets)
            .HasForeignKey(w => w.UserId)
            .OnDelete(DeleteBehavior.Cascade);

        // User - Transactions: One-to-Many (Sent Transactions)
        modelBuilder.Entity<Transaction>()
            .HasOne(t => t.Sender)
            .WithMany(u => u.SentTransactions)
            .HasForeignKey(t => t.SenderId)
            .OnDelete(DeleteBehavior.NoAction);

        // User - Transactions: One-to-Many (Received Transactions)
        modelBuilder.Entity<Transaction>()
            .HasOne(t => t.Receiver)
            .WithMany(u => u.ReceivedTransactions)
            .HasForeignKey(t => t.ReceiverId)
            .OnDelete(DeleteBehavior.NoAction);

        // Many-to-Many Relationship for Transaction Relations
        modelBuilder.Entity<TransactionRelation>()
            .HasKey(tr => new { tr.ParentTransactionId, tr.ChildTransactionId });

        modelBuilder.Entity<TransactionRelation>()
            .HasOne(tr => tr.ParentTransaction)
            .WithMany(t => t.ChildRelations)
            .HasForeignKey(tr => tr.ParentTransactionId)
            .OnDelete(DeleteBehavior.NoAction);

        modelBuilder.Entity<TransactionRelation>()
            .HasOne(tr => tr.ChildTransaction)
            .WithMany(t => t.ParentRelations)
            .HasForeignKey(tr => tr.ChildTransactionId)
            .OnDelete(DeleteBehavior.NoAction);

        // Enforce Unique TransactionRef
        modelBuilder.Entity<Transaction>()
            .HasIndex(t => t.TransactionRef)
            .IsUnique();
    }
}
